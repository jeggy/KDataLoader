buildscript {
    ext.kotlinVersion = "1.3.61"
    ext.coroutinesVersion = "1.3.3"
    ext.bintrayVersion = "1.8.4"

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion"
    }

    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'com.jfrog.bintray'
apply from: rootProject.file("gradle/commonVariables.gradle")

bintray {
    user = (project.hasProperty("bintray_user")) ? project.property("bintray_user") : System.getenv('BINTRAY_USER')
    key = (project.hasProperty("bintray_key")) ? project.property("bintray_key") : System.getenv('BINTRAY_API_KEY')
    //publications = ['maven']
    //publish = true
    override = true

    pkg {
        repo = "maven"
        name = project.name
        licenses = ["MIT"]
        labels = ["kotlin", "Kotlin", "DataLoader", "GraphQL"]
        vcsUrl = myVcsUrl
        websiteUrl = myWebsiteUrl
        issueTrackerUrl = "$myVcsUrl/issues"

        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }

}

bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }
}

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
bintrayUpload.dependsOn publishToMavenLocal

/*
tasks.withType(BintrayUploadTask) {
    doFirst {
        logger.log(LogLevel.ERROR, publishing.publications as String)
        publishing.publications
                .findAll { it instanceof MavenPublication}
                .forEach { publication ->
                    def moduleFile = buildDir.resolve("publications/${publication.name}/module.json")
                    if (moduleFile.exists()) {
                        publication.artifact {"module"}
                    }
                }
    }
}
*/


/*tasks.withType<BintrayUploadTask> {
    doFirst {
        publishing.publications
                .filterIsInstance<MavenPublication>()
                .forEach { publication ->
                    val moduleFile = buildDir.resolve("publications/${publication.name}/module.json")
                    if (moduleFile.exists()) {
                        publication.artifact(object : FileBasedMavenArtifact(moduleFile) {
                            override fun getDefaultExtension() = "module"
                        })
                    }
                }
    }
}*/